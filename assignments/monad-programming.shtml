<!--#include virtual="/pl2/header.html" -->	 
</div>

<!-- Main -->
<div id="main" class="wrapper style4">

<!-- Content -->
<div id="content" class="container">
<section>
<header class="major">
  <h2>Assigment 2: Monad programming</h2>
</header>

<p>
  For this assignment you will get some experience programming in monadic style in OCaml.  The file <a href="../code/monads.ml"><tt>monads.ml</tt></a> contains basic definitions and examples of monads we covered in class, you can use any libraries in this file (and we will assume they are loaded when running your code).
  <ol>
    <li>Write list_hd and list_tl functions for OCaml lists in the <tt>Exception</tt> monad which will raise (exceptions monad, not OCaml) exceptions when these operators are applied to empty lists.  Note that the type for e.g. list_head should be <tt>'a list -> 'a Exception.mon</tt> - it could return an exception.  (One nice feature of using the exceptions monad is that effect must show up in the type, like Java exceptions.)</li>
    <li>Now write a <tt>list_foldl</tt> function which is like the standard <tt>List.fold_left</tt> except it only works on lists of length two or more, and there is no need to supply the "zero" argument for this reason: the type will be <tt>('a -> 'b -> 'a) -> 'b list -> 'a Exception.mon</tt>.  The base case instead of a zero-element list is a 2-element list, for which we just apply the binary operator.  In order to get monad programming experience you are to use the previous list_hd and list_tl functions <em>only</em> to take apart the list argument, and if the list is shorter than two those operations will raise (exceptions monad) exceptions which your code should bubble up "automatically" as you will be writing your <tt>list_foldl</tt> monadically.</li>
    <li>It is possible to define an operation <tt>reset</tt> which will clear out the store in the OCaml <tt>State</tt> monad. With this function the following code
      <pre>
	  State.(run (let* r = ref 0 in
	  let* _ = reset in
	  let* va = deref r in ret va))
      </pre>
      will return an OCaml exception <tt>Not_found</tt> from trying to access a key that is not in the store -- the <tt>reset</tt> zeroed it out.  For this question write such a <tt>reset</tt> function such that copying and pasting the above code will give the OCaml not found exception.</li>
    
    <li><tt>reset</tt> is in fact fairly ugly for this reason, it is similar to freeing a heap value in C when the program still holds a pointer to it.  For this question let us write some less ugly store manipulation operators which should not raise any exceptions: <tt>State.checkpoint </tt> and <tt>State.snapback</tt>.  Checkpointing will remember the current store (in an implicit location in the monad wrapper), and snapback will restore to a previous checkpointed heap.  The restore operation will only <em>override</em> any values in the current store to be the (older) checkpointed ones, any new references created after the checkpoint will remain and so we will not get any dangling pointers.<p>
	To implement this you will need to make a new version of the <tt>State</tt> module called <tt>StateSnap</tt> which will include these two new operators and additional wrapping to implement them.  Hint: to implement the override use the <tt>union</tt> operation on the underlying OCaml <tt>Map</tt> implementing the store.  This operation will need to be exposed in the interface so you will also need to make your own <tt>StoreSnap</tt> which extends the <tt>Store</tt> with an override operation.</p></li>
    
    <li>The monad laws should hold for any monad constructed.  Argue informally that the laws hold for the Exception monad in <tt>monads.ml</tt>.  The laws are found on the Leroy slides #8/81. To reason about OCaml code, use OCaml operational equivalences.  We did not formally define operational equivalence on OCaml but the laws are similar to the Fb laws in the PL book; feel free to use any common-sense equation on OCaml programs.</li>
    <li>Argue that <tt>ExceptionTransf(Identity)</tt>, the exceptions monad transformer applied to the identity monad, has equivalent behavior to the <tt>Exception</tt> monad, again reasoning about operationally-equivalent OCaml code as in the previous question.  

      
  </ol>
  
  <p>
    For this assignment just place the code answers in a single file <tt>monad-programming.ml</tt>. You can either include the written question answers as comments in that file, or upload a separate .txt or pdf or jpg or whatever with your answers.   Submit all files using Gradescope.

	
</section>
</div>
</div>


<!--#include virtual="/pl2/footer.html" -->
