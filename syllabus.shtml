<!--#include virtual="header.html" -->
</div>

    <!-- Main -->
      <div id="main" class="wrapper style4">

        <!-- Content -->
        <div id="content" class="container">
          <section>
            <header class="major">
              <h2>Syllabus</h2>
            </header>
<p>


<h3>Lecture Outline</h3>

<p> This is the preliminary list of M/W lecture topics and readings.  See the <a href="dateline.shtml">dateline</a> for what we actually end up doing.
<p>
  The M/W topics are primarily focused on higher-order and functional programming, following the pattern of PoPL I.

<p>
  <a href="https://pl.cs.jhu.edu/seminars/fall-2019/">
    Friday is a paper reading day</a> which will cover some recent papers as well as surveys of some topics we could not fit in the M/W days.
 	      
<h4>Advanced Functional Programming in OCaml</h4>
<p> To warm up let's cover some stuff that is more "PL I" but we didn't have the time to cover it there.
<ul>
<li>Folds and generalized folds (catamorphisms, hylomorphisms, etc)</li>
<li>Pipelining</li>
<li>OCaml modules and functors</li>
<li>Generalized Abstract Data Types (GADTs) in OCaml</li>
</ul>
<b>Resources:</b>
<ul>  <li>Folds and Pipelining: Cornell CS, <a href="https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/hop/intro.html">Functional Programming in OCaml: Folds</a></li>
  <li>GADT's: the <a href="https://caml.inria.fr/pub/docs/manual-ocaml/manual033.html">
    OCaml manual chapter 8.11</a>; <a href="https://mads-hartmann.com/ocaml/2015/01/05/gadt-ocaml.html">Detecting use-cases for GADTs in OCaml by Mads Hartmann</a>; 
    </li>

</ul>

<!--
Florent Balestrieri, Michel Mauny, QQQa href="https://arxiv.org/pdf/1812.11665.pdf">Generic Programming in OCamlQQQ/a>; 

https://www.cl.cam.ac.uk/teaching/1718/L28/materials.html
 - GADTs in OCaml plus lots of other advanced functional programming stuff.  Also 1415 for a different iteration.

Removing the following topics, we basically covered them in PL I.  Should introduce these terms in the PL I presentation...
  Let over lambda aka objects as closures
  Open recursion

  QQQli>Doug Hoyte, QQQa href="https://letoverlambda.com/index.cl/guest/chap2.html">Let Over Lambda, Chapter 2QQQ/a>
  -->

<h4>Transformations</h4>

<ul>
<li>A-translation</li>
<li>Closure Conversion</li>
<li>Defunctionalization</li>
<li>Continuation-passing style, 
CPS transformation, and exceptions encodings</li>
<li>State-passing style and reader/writer threading</li>
<li>Unifying transformations with the monad template</li>
<li>Programming with monads and monad transformers</li>
</ul>
<b>Resources:</b>
<ul>
  <li>Xavier Leroy, <a href="https://xavierleroy.org/mpri/2-4/transformations.2up.pdf">Functional programming languages Part III: program transformations</a></li> <!-- Covers Closure conversion, Defunctionalization, Exception-returning style, State-passing style, Continuation-passing style -->
  <li>Xavier Leroy, <a href="https://xavierleroy.org/mpri/2-4/monads.2up.pdf">Functional programming languages Part IV: monadic transformations, monadic programming</a>  (<a href="https://xavierleroy.org/mpri/2-4/monads.ml">code</a>)
      <li>Cornell CS, <a href="https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/ads/monads.html">Functional Programming in OCaml: Monads</a>
  </li>
    </ul>

     <!-- 


https://www.cs.cornell.edu/courses/cs3110/2016fa/l/23-monads/rec.html - recitation notes on monads from Cornell, includes some questions.

Jan's notes below cover CPS, ANF.

Current plan: 
1) Do Leroy transformations notes, skipping his opsem tangents since we already did that.  He doesn't do A-trans but it covrers all the other ones (also no IO but it is enough like state).

       -->

<h4>Advanced Operational Semantics</h4>

<ul>
<li>Big-step operational semantics review</li>
<li>Environment/closure-based operational semantics</li>
<li>Church's lambda-calculus, reduction, and small-step operational semantics</li>
</ul>
<p>
<b>Resources:</b>
<ul>
<li>Xavier Leroy, <a href="https://xavierleroy.org/mpri/2-4/semantics.2up.pdf">Functional programming languages
   Part I: interpreters and operational semantics</a></li> <!-- Great topic coverage, evaluation contexts and small step and environments/closures! Can mainly do these notes for this section.  -->
<li>Peter Selinger, <a href="https://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf">Lecture Notes on the Lambda Calculus</a>
<!-- 

Jan's notes below cover closures.

-->
</ul>


<h4>Program Analysis</h4>
<p> We will cover this topic in depth, implementing both abstract interpreters and symbolic evaluators.
<ul>
<li>Abstract interpretation</li>
<li>Symbolic Execution</li>
</ul>

<b>Resources:</b>
<ul>
  <li>Van Horn and Might, <a href="http://matt.might.net/papers/vanhorn2010abstract.pdf">Abstracting Abstract Machines</a></li>
</ul>
<!-- Alrich course has a good presentation of first-order as well, and its more to the point than Jan's
notes which wander over a lot of other topics.  See https://www.cs.cmu.edu/~aldrich/courses/17-355-18sp/ 
It requires going through several lectures worth as the "interprocedural" does not show up until the end.
  QQQli>Jonathn Aldrich, QQQa href="http://www.cs.cmu.edu/~aldrich/courses/17-355-17sp/notes/notes10-functional-cfa.pdf">Lecture Notes: Control Flow Analysis for Functional LanguagesQQQ/a>

  -->


<h4>Advanced typed systems</h4> <!-- Not getting very excited about this topic and no good notes - cut? -->
<p> We are going to cover basic type theory in detail (forall, exists, kinds) and spend less time on the advanced topics since they constitute a whole course if done rigorously.</p>
<ul>
  <li>Forall, exists</li>
  <li>Higher kinds and type functions</li>
  <li>Recursive types</li>
  <li>Effect types</li>
  <li>Ownership types</li>
  <li>Gradual types</li>
  <li>Dependent types</li>
</ul>

<b>Resources:</b>
<ul>
<li>MPI-SWS, <a href="https://plv.mpi-sws.org/semantics/2017/lecturenotes.pdf">Semantics of Type Systems Lecture Notes</a>: covers the basics, system F, recursive types.
</ul>

<!--
  All the types classes seem to be Pierce-based -- too much classic dry stuff.  
 https://www.doc.ic.ac.uk/~svb/TSfPL/notes.pdf Type Systems for Programming Languages Steffen van Bakel 
  - rather tedious
     https://www.cl.cam.ac.uk/teaching/1617/Types/types.notes.pdf Pitts 
 http://ecee.colorado.edu/~siek/ecen5013/spring10/ Siek

 Probably will need to read papers and just make my own notes for this.

-->

<h4>Program verification</h4>
<ul>
<li>Program logics</li>
<li>Satisfiability Modulo Theories</li>
<li>Inductive definitions</li>
<li>The Coq Theorem prover </li>
</ul>

<b>Resources:</b>
<ul>
  <li>Aldrich and Le Goues, <a href="https://www.cs.cmu.edu/~aldrich/courses/17-355-18sp/notes/notes11-hoare-logic.pdf">Lecture Notes: Axiomatic Semantics and Hoare-style Verification</a></li>
  <li>Aldrich and Le Goues, <a href="https://www.cs.cmu.edu/~aldrich/courses/17-355-18sp/notes/notes12-dpll-smt.txt">Lecture Notes: Satisfiability Modulo Theories</a>
  <li>Aldrich, <a href="https://www.cs.cmu.edu/~aldrich/courses/17-355-18sp/notes/notes14-symbolic-execution.pdf">Lecture Notes: Symbolic Execution</a>
<li>Arnd Poetzsch-Heffter et al., <a href="https://softech.cs.uni-kl.de/homepage/teaching/SVHOL12/slides6a.pdf">Inductive Definitions and Fixed Points</a>
<li>Cornell CS, <a href="https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/coq/coq.html">Coq Tutorial</a></li>
</ul>

<!--   https://softwarefoundations.cis.upenn.edu/lf-current/toc.html Software Foundations is a more extended version of the cornell Coq Notes above.\


Removed model checking, can do on a Friday.
-->

<p>
  <h3>Assignments Outline</h3>

<p>Here is an initial outline for what assignments will be offered in the class.  See the dateline for the  assignments we settle on, and the due dates.
  <ol>
    <li>An environment-based Fb interpreter in OCaml</li>
    <li>Transforming Fb programs in OCaml: closure conversion, A-Translation, defunctionalization, CPS.</li>
    <li>Programming with monads in OCaml</li>
    <li>An Fb environment/closure-based interpreter in OCaml</li>
    <li>An Fb abstract interpreter in OCaml</li>
    <li>An Fb symbolic evaluator in OCaml using the Z3 SMT solver</li>
    <li>Correctness proofs in Coq</li>
</ol>

      <h3>Potential Tutorial topics for paper reading Fridays</h3>

      <ul>
  <li>Aldrich and Le Goues, <a href="https://www.cs.cmu.edu/~aldrich/courses/17-355-18sp/notes/slides16-model-checking.pdf">Model Checking and Linear Temporal Logic</a>
  <li>First-order program analysis.  Via e.g. <a href="https://www.cs.cmu.edu/~aldrich/courses/17-355-18sp/ ">Aldrich course</a>.</li>
  <li>Some of the advanced types topics such as ownership types and gradual types.
    <li><a href="https://arxiv.org/pdf/1610.00502.pdf">A Survey of Symbolic Execution Techniques</a> - the broader view of symbolic execution.
      </ul>


      <!-- Additional stuff..

https://www.informatik.uni-marburg.de/~kos/teaching/pl/ - an advanced PL class..

	-->

      
          </section>
        </div>
      </div>

<!--#include virtual="footer.html" -->


      
